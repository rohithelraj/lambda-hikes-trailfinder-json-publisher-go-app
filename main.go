package main

import (
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/widget"
)

func main() {
	myApp := app.New()
	myWindow := myApp.NewWindow("Report Tab Example")

	// Input fields
	entryType := widget.NewSelect([]string{"Event", "Trip", "Report"}, nil)
	reportDate := widget.NewEntry()
	reportType := widget.NewSelect([]string{"Event", "Trip"}, nil)
	reportName := widget.NewEntry() // New field
	relatedTripURL := widget.NewEntry()
	relatedEventURL := widget.NewEntry()
	uniqueReportID := widget.NewEntry()
	googleMapURL := widget.NewEntry()
	mainImagePath := widget.NewEntry()
	description := widget.NewEntry()
	description.Wrapping = fyne.TextWrapWord // Enable multiline

	// Dynamic sub-image fields
	subImageContainer := container.NewVBox()

	addSubImageButton := widget.NewButton("Add Sub Image", func() {
		subImageURL := widget.NewEntry()
		subImageName := widget.NewLabel("Image <auto-generated>")
		subImageDescription := widget.NewEntry()
		subImageDescription.Wrapping = fyne.TextWrapWord // Enable multiline

		// Create a container for the sub-image fields
		subImageItem := container.NewVBox(
			widget.NewLabel("Sub Image URL:"), subImageURL,
			subImageName,
			widget.NewLabel("Sub Image Description:"), subImageDescription,
		)

		// Add the new subImageItem to the subImageContainer
		subImageContainer.Add(subImageItem)
	})

	// Publish button logic
	publishButton := widget.NewButton("Publish", func() {
		// Validate required fields
		if entryType.Selected == "" || reportDate.Text == "" || reportType.Selected == "" || reportName.Text == "" || uniqueReportID.Text == "" {
			dialog.ShowError(fmt.Errorf("Please fill all required fields"), myWindow)
			return
		}

		// Collect data into a JSON object
		reportData := map[string]interface{}{
			"EntryType":       entryType.Selected,
			"ReportDate":      reportDate.Text,
			"ReportType":      reportType.Selected,
			"ReportName":      reportName.Text,
			"RelatedTripURL":  relatedTripURL.Text,
			"RelatedEventURL": relatedEventURL.Text,
			"UniqueReportID":  uniqueReportID.Text,
			"GoogleMapURL":    googleMapURL.Text,
			"MainImagePath":   mainImagePath.Text,
			"Description":     description.Text,
			"SubImages":       getSubImageData(subImageContainer),
		}

		// Convert to JSON
		jsonData, err := json.MarshalIndent(reportData, "", "  ")
		if err != nil {
			dialog.ShowError(err, myWindow)
			return
		}

		// Save JSON file
		outputFolder := "output"
		if _, err := os.Stat(outputFolder); os.IsNotExist(err) {
			err = os.Mkdir(outputFolder, os.ModePerm)
			if err != nil {
				dialog.ShowError(fmt.Errorf("Failed to create output folder: %v", err), myWindow)
				return
			}
		}

		fileName := filepath.Join(outputFolder, fmt.Sprintf("%s_%s.json", uniqueReportID.Text, reportName.Text))
		err = os.WriteFile(fileName, jsonData, 0644)
		if err != nil {
			dialog.ShowError(err, myWindow)
			return
		}

		dialog.ShowInformation("Success", fmt.Sprintf("Report saved as %s", fileName), myWindow)
	})

	// Layout
	content := container.NewVBox(
		widget.NewLabel("Entry Type*:"), entryType,
		widget.NewLabel("Report Date*:"), reportDate,
		widget.NewLabel("Report Type*:"), reportType,
		widget.NewLabel("Report Name*:"), reportName,
		widget.NewLabel("Related Trip URL:"), relatedTripURL,
		widget.NewLabel("Related Event URL:"), relatedEventURL,
		widget.NewLabel("Unique Report ID*:"), uniqueReportID,
		widget.NewLabel("Unique Google Map URL:"), googleMapURL,
		widget.NewLabel("Main Image Path:"), mainImagePath,
		widget.NewLabel("Description:"), description,
		widget.NewLabel("Sub Images:"),
		subImageContainer, addSubImageButton,
		layout.NewSpacer(),
		publishButton,
	)

	// Make content scrollable
	scrollableContent := container.NewVScroll(content)

	reportTab := container.NewTabItem("Report", scrollableContent)
	tabs := container.NewAppTabs(reportTab)

	myWindow.SetContent(tabs)
	myWindow.Resize(fyne.NewSize(600, 800))
	myWindow.ShowAndRun()
}

// Helper function to get sub-image data from the container
func getSubImageData(container *fyne.Container) []map[string]string {
	var subImages []map[string]string
	for _, obj := range container.Objects {
		if subImageItem, ok := obj.(*fyne.Container); ok {
			var subImageData = make(map[string]string)
			for _, subObj := range subImageItem.Objects {
				switch field := subObj.(type) {
				case *widget.Entry:
					subImageData["URL"] = field.Text
				case *widget.Label:
					if field.Text != "" && field.Text != "Image <auto-generated>" {
						subImageData["Name"] = field.Text
					}
				}
			}
			subImages = append(subImages, subImageData)
		}
	}
	return subImages
}
